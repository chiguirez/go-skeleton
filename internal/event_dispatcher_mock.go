// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"sync"
)

var (
	lockEventDispatcherMockDispatch sync.RWMutex
)

// Ensure, that EventDispatcherMock does implement EventDispatcher.
// If this is not the case, regenerate this file with moq.
var _ EventDispatcher = &EventDispatcherMock{}

// EventDispatcherMock is a mock implementation of EventDispatcher.
//
//     func TestSomethingThatUsesEventDispatcher(t *testing.T) {
//
//         // make and configure a mocked EventDispatcher
//         mockedEventDispatcher := &EventDispatcherMock{
//             DispatchFunc: func(domainEvent []DomainEvent)  {
// 	               panic("mock out the Dispatch method")
//             },
//         }
//
//         // use mockedEventDispatcher in code that requires EventDispatcher
//         // and then make assertions.
//
//     }
type EventDispatcherMock struct {
	// DispatchFunc mocks the Dispatch method.
	DispatchFunc func(domainEvent []DomainEvent)

	// calls tracks calls to the methods.
	calls struct {
		// Dispatch holds details about calls to the Dispatch method.
		Dispatch []struct {
			// DomainEvent is the domainEvent argument value.
			DomainEvent []DomainEvent
		}
	}
}

// Dispatch calls DispatchFunc.
func (mock *EventDispatcherMock) Dispatch(domainEvent []DomainEvent) {
	if mock.DispatchFunc == nil {
		panic("EventDispatcherMock.DispatchFunc: method is nil but EventDispatcher.Dispatch was just called")
	}
	callInfo := struct {
		DomainEvent []DomainEvent
	}{
		DomainEvent: domainEvent,
	}
	lockEventDispatcherMockDispatch.Lock()
	mock.calls.Dispatch = append(mock.calls.Dispatch, callInfo)
	lockEventDispatcherMockDispatch.Unlock()
	mock.DispatchFunc(domainEvent)
}

// DispatchCalls gets all the calls that were made to Dispatch.
// Check the length with:
//     len(mockedEventDispatcher.DispatchCalls())
func (mock *EventDispatcherMock) DispatchCalls() []struct {
	DomainEvent []DomainEvent
} {
	var calls []struct {
		DomainEvent []DomainEvent
	}
	lockEventDispatcherMockDispatch.RLock()
	calls = mock.calls.Dispatch
	lockEventDispatcherMockDispatch.RUnlock()
	return calls
}
